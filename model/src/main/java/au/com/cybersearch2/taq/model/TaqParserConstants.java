/* Generated By:JavaCC: Do not edit this line. TaqParserConstants.java */
package au.com.cybersearch2.taq.model;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TaqParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int AXIOM = 6;
  /** RegularExpression Id. */
  int BOOLEAN = 7;
  /** RegularExpression Id. */
  int COMPLEX = 8;
  /** RegularExpression Id. */
  int CURRENCY = 9;
  /** RegularExpression Id. */
  int CURSOR = 10;
  /** RegularExpression Id. */
  int DECIMAL = 11;
  /** RegularExpression Id. */
  int DOUBLE = 12;
  /** RegularExpression Id. */
  int EXPORT = 13;
  /** RegularExpression Id. */
  int FACT = 14;
  /** RegularExpression Id. */
  int FLOW = 15;
  /** RegularExpression Id. */
  int FUNCTION = 16;
  /** RegularExpression Id. */
  int INCLUDE = 17;
  /** RegularExpression Id. */
  int INTEGER = 18;
  /** RegularExpression Id. */
  int LIST = 19;
  /** RegularExpression Id. */
  int MAP = 20;
  /** RegularExpression Id. */
  int PATTERN = 21;
  /** RegularExpression Id. */
  int QUERY = 22;
  /** RegularExpression Id. */
  int RESOURCE = 23;
  /** RegularExpression Id. */
  int REVERSE = 24;
  /** RegularExpression Id. */
  int SCOPE = 25;
  /** RegularExpression Id. */
  int SELECT = 26;
  /** RegularExpression Id. */
  int STRING = 27;
  /** RegularExpression Id. */
  int TEMPLATE = 28;
  /** RegularExpression Id. */
  int TERM = 29;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 30;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 31;
  /** RegularExpression Id. */
  int HEX_LITERAL = 32;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 33;
  /** RegularExpression Id. */
  int EXPONENT = 34;
  /** RegularExpression Id. */
  int STRING_LITERAL = 35;
  /** RegularExpression Id. */
  int QUOTE = 36;
  /** RegularExpression Id. */
  int TRUE = 37;
  /** RegularExpression Id. */
  int FALSE = 38;
  /** RegularExpression Id. */
  int UNKNOWN = 39;
  /** RegularExpression Id. */
  int NAN = 40;
  /** RegularExpression Id. */
  int IDENTIFIER = 41;
  /** RegularExpression Id. */
  int LPAREN = 42;
  /** RegularExpression Id. */
  int RPAREN = 43;
  /** RegularExpression Id. */
  int LBRACE = 44;
  /** RegularExpression Id. */
  int RBRACE = 45;
  /** RegularExpression Id. */
  int LBRACKET = 46;
  /** RegularExpression Id. */
  int RBRACKET = 47;
  /** RegularExpression Id. */
  int SEMICOLON = 48;
  /** RegularExpression Id. */
  int COMMA = 49;
  /** RegularExpression Id. */
  int DOT = 50;
  /** RegularExpression Id. */
  int RARROW = 51;
  /** RegularExpression Id. */
  int AT = 52;
  /** RegularExpression Id. */
  int BQUOT = 53;
  /** RegularExpression Id. */
  int ASSIGN = 54;
  /** RegularExpression Id. */
  int LT = 55;
  /** RegularExpression Id. */
  int GT = 56;
  /** RegularExpression Id. */
  int BANG = 57;
  /** RegularExpression Id. */
  int COLON = 58;
  /** RegularExpression Id. */
  int QMARK = 59;
  /** RegularExpression Id. */
  int EQ = 60;
  /** RegularExpression Id. */
  int LE = 61;
  /** RegularExpression Id. */
  int GE = 62;
  /** RegularExpression Id. */
  int NE = 63;
  /** RegularExpression Id. */
  int SC_OR = 64;
  /** RegularExpression Id. */
  int SC_AND = 65;
  /** RegularExpression Id. */
  int INCR = 66;
  /** RegularExpression Id. */
  int DECR = 67;
  /** RegularExpression Id. */
  int PLUS = 68;
  /** RegularExpression Id. */
  int MINUS = 69;
  /** RegularExpression Id. */
  int STAR = 70;
  /** RegularExpression Id. */
  int SLASH = 71;
  /** RegularExpression Id. */
  int BIT_AND = 72;
  /** RegularExpression Id. */
  int BIT_OR = 73;
  /** RegularExpression Id. */
  int XOR = 74;
  /** RegularExpression Id. */
  int REM = 75;
  /** RegularExpression Id. */
  int LSHIFT = 76;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 77;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 78;
  /** RegularExpression Id. */
  int PLUSASSIGN = 79;
  /** RegularExpression Id. */
  int MINUSASSIGN = 80;
  /** RegularExpression Id. */
  int STARASSIGN = 81;
  /** RegularExpression Id. */
  int SLASHASSIGN = 82;
  /** RegularExpression Id. */
  int ANDASSIGN = 83;
  /** RegularExpression Id. */
  int ORASSIGN = 84;
  /** RegularExpression Id. */
  int XORASSIGN = 85;
  /** RegularExpression Id. */
  int REMASSIGN = 86;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 87;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 88;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 89;
  /** RegularExpression Id. */
  int ELIPSES = 90;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "\"axiom\"",
    "\"boolean\"",
    "\"complex\"",
    "\"currency\"",
    "\"cursor\"",
    "\"decimal\"",
    "\"double\"",
    "\"export\"",
    "\"fact\"",
    "\"flow\"",
    "\"function\"",
    "\"include\"",
    "\"integer\"",
    "\"list\"",
    "\"map\"",
    "\"pattern\"",
    "\"query\"",
    "\"resource\"",
    "\"reverse\"",
    "\"scope\"",
    "\"select\"",
    "\"string\"",
    "\"template\"",
    "\"term\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<QUOTE>",
    "\"true\"",
    "\"false\"",
    "\"unknown\"",
    "\"NaN\"",
    "<IDENTIFIER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"->\"",
    "\"@\"",
    "\"`\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"!\"",
    "\":\"",
    "\"?\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>>\"",
    "\">>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"...\"",
    "\"$\"",
    "\"#\"",
    "\"~\"",
  };

}
